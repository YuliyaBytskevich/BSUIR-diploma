namespace Obfuscation.Core.Mappers
{
    internal static class CSToken
    {
        public static int TypeNameToIndex(string name)
        {
            switch (name.ToUpper())
            {
                case "BYTE_ORDER_MARK": return 1;
                case "SINGLE_LINE_DOC_COMMENT": return 2;
                case "DELIMITED_DOC_COMMENT": return 3;
                case "SINGLE_LINE_COMMENT": return 4;
                case "DELIMITED_COMMENT": return 5;
                case "WHITESPACES": return 6;
                case "SHARP": return 7;
                case "ABSTRACT": return 8;
                case "ADD": return 9;
                case "ALIAS": return 10;
                case "ARGLIST": return 11;
                case "AS": return 12;
                case "ASCENDING": return 13;
                case "ASYNC": return 14;
                case "AWAIT": return 15;
                case "BASE": return 16;
                case "BOOL": return 17;
                case "BREAK": return 18;
                case "BY": return 19;
                case "BYTE": return 20;
                case "CASE": return 21;
                case "CATCH": return 22;
                case "CHAR": return 23;
                case "CHECKED": return 24;
                case "CLASS": return 25;
                case "CONST": return 26;
                case "CONTINUE": return 27;
                case "DECIMAL": return 28;
                case "DEFAULT": return 29;
                case "DELEGATE": return 30;
                case "DESCENDING": return 31;
                case "DO": return 32;
                case "DOUBLE": return 33;
                case "DYNAMIC": return 34;
                case "ELSE": return 35;
                case "ENUM": return 36;
                case "EQUALS": return 37;
                case "EVENT": return 38;
                case "EXPLICIT": return 39;
                case "EXTERN": return 40;
                case "FALSE": return 41;
                case "FINALLY": return 42;
                case "FIXED": return 43;
                case "FLOAT": return 44;
                case "FOR": return 45;
                case "FOREACH": return 46;
                case "FROM": return 47;
                case "GET": return 48;
                case "GOTO": return 49;
                case "GROUP": return 50;
                case "IF": return 51;
                case "IMPLICIT": return 52;
                case "IN": return 53;
                case "INT": return 54;
                case "INTERFACE": return 55;
                case "INTERNAL": return 56;
                case "INTO": return 57;
                case "IS": return 58;
                case "JOIN": return 59;
                case "LET": return 60;
                case "LOCK": return 61;
                case "LONG": return 62;
                case "NAMEOF": return 63;
                case "NAMESPACE": return 64;
                case "NEW": return 65;
                case "NULL": return 66;
                case "OBJECT": return 67;
                case "ON": return 68;
                case "OPERATOR": return 69;
                case "ORDERBY": return 70;
                case "OUT": return 71;
                case "OVERRIDE": return 72;
                case "PARAMS": return 73;
                case "PARTIAL": return 74;
                case "PRIVATE": return 75;
                case "PROTECTED": return 76;
                case "PUBLIC": return 77;
                case "READONLY": return 78;
                case "REF": return 79;
                case "REMOVE": return 80;
                case "RETURN": return 81;
                case "SBYTE": return 82;
                case "SEALED": return 83;
                case "SELECT": return 84;
                case "SET": return 85;
                case "SHORT": return 86;
                case "SIZEOF": return 87;
                case "STACKALLOC": return 88;
                case "STATIC": return 89;
                case "STRING": return 90;
                case "STRUCT": return 91;
                case "SWITCH": return 92;
                case "THIS": return 93;
                case "THROW": return 94;
                case "TRUE": return 95;
                case "TRY": return 96;
                case "TYPEOF": return 97;
                case "UINT": return 98;
                case "ULONG": return 99;
                case "UNCHECKED": return 100;
                case "UNSAFE": return 101;
                case "USHORT": return 102;
                case "USING": return 103;
                case "VIRTUAL": return 104;
                case "VOID": return 105;
                case "VOLATILE": return 106;
                case "WHEN": return 107;
                case "WHERE": return 108;
                case "WHILE": return 109;
                case "YIELD": return 110;
                case "IDENTIFIER": return 111;
                case "LITERAL_ACCESS": return 112;
                case "INTEGER_LITERAL": return 113;
                case "HEX_INTEGER_LITERAL": return 114;
                case "REAL_LITERAL": return 115;
                case "CHARACTER_LITERAL": return 116;
                case "REGULAR_STRING": return 117;
                case "VERBATIUM_STRING": return 118;
                case "INTERPOLATED_REGULAR_STRING_START": return 119;
                case "INTERPOLATED_VERBATIUM_STRING_START": return 120;
                case "OPEN_BRACE": return 121;
                case "CLOSE_BRACE": return 122;
                case "OPEN_BRACKET": return 123;
                case "CLOSE_BRACKET": return 124;
                case "OPEN_PARENS": return 125;
                case "CLOSE_PARENS": return 126;
                case "DOT": return 127;
                case "COMMA": return 128;
                case "COLON": return 129;
                case "SEMICOLON": return 130;
                case "PLUS": return 131;
                case "MINUS": return 132;
                case "STAR": return 133;
                case "DIV": return 134;
                case "PERCENT": return 135;
                case "AMP": return 136;
                case "BITWISE_OR": return 137;
                case "CARET": return 138;
                case "BANG": return 139;
                case "TILDE": return 140;
                case "ASSIGNMENT": return 141;
                case "LT": return 142;
                case "GT": return 143;
                case "INTERR": return 144;
                case "DOUBLE_COLON": return 145;
                case "OP_COALESCING": return 146;
                case "OP_INC": return 147;
                case "OP_DEC": return 148;
                case "OP_AND": return 149;
                case "OP_OR": return 150;
                case "OP_PTR": return 151;
                case "OP_EQ": return 152;
                case "OP_NE": return 153;
                case "OP_LE": return 154;
                case "OP_GE": return 155;
                case "OP_ADD_ASSIGNMENT": return 156;
                case "OP_SUB_ASSIGNMENT": return 157;
                case "OP_MULT_ASSIGNMENT": return 158;
                case "OP_DIV_ASSIGNMENT": return 159;
                case "OP_MOD_ASSIGNMENT": return 160;
                case "OP_AND_ASSIGNMENT": return 161;
                case "OP_OR_ASSIGNMENT": return 162;
                case "OP_XOR_ASSIGNMENT": return 163;
                case "OP_LEFT_SHIFT": return 164;
                case "OP_LEFT_SHIFT_ASSIGNMENT": return 165;
                case "DOUBLE_CURLY_INSIDE": return 166;
                case "OPEN_BRACE_INSIDE": return 167;
                case "REGULAR_CHAR_INSIDE": return 168;
                case "VERBATIUM_DOUBLE_QUOTE_INSIDE": return 169;
                case "DOUBLE_QUOTE_INSIDE": return 170;
                case "REGULAR_STRING_INSIDE": return 171;
                case "VERBATIUM_INSIDE_STRING": return 172;
                case "CLOSE_BRACE_INSIDE": return 173;
                case "FORMAT_STRING": return 174;
                case "DIRECTIVE_WHITESPACES": return 175;
                case "DIGITS": return 176;
                case "DEFINE": return 177;
                case "UNDEF": return 178;
                case "ELIF": return 179;
                case "ENDIF": return 180;
                case "LINE": return 181;
                case "ERROR": return 182;
                case "WARNING": return 183;
                case "REGION": return 184;
                case "ENDREGION": return 185;
                case "PRAGMA": return 186;
                case "DIRECTIVE_HIDDEN": return 187;
                case "CONDITIONAL_SYMBOL": return 188;
                case "DIRECTIVE_NEW_LINE": return 189;
                case "TEXT": return 190;
                case "DOUBLE_CURLY_CLOSE_INSIDE": return 191;

                default: return -1;
            }
        }

        public static string TypeIndexToName(int index)
        {
            switch (index)
            {
                case 1: return "BYTE_ORDER_MARK";
                case 2: return "SINGLE_LINE_DOC_COMMENT";
                case 3: return "DELIMITED_DOC_COMMENT";
                case 4: return "SINGLE_LINE_COMMENT";
                case 5: return "DELIMITED_COMMENT";
                case 6: return "WHITESPACES";
                case 7: return "SHARP";
                case 8: return "ABSTRACT";
                case 9: return "ADD";
                case 10: return "ALIAS";
                case 11: return "ARGLIST";
                case 12: return "AS";
                case 13: return "ASCENDING";
                case 14: return "ASYNC";
                case 15: return "AWAIT";
                case 16: return "BASE";
                case 17: return "BOOL";
                case 18: return "BREAK";
                case 19: return "BY";
                case 20: return "BYTE";
                case 21: return "CASE";
                case 22: return "CATCH";
                case 23: return "CHAR";
                case 24: return "CHECKED";
                case 25: return "CLASS";
                case 26: return "CONST";
                case 27: return "CONTINUE";
                case 28: return "DECIMAL";
                case 29: return "DEFAULT";
                case 30: return "DELEGATE";
                case 31: return "DESCENDING";
                case 32: return "DO";
                case 33: return "DOUBLE";
                case 34: return "DYNAMIC";
                case 35: return "ELSE";
                case 36: return "ENUM";
                case 37: return "EQUALS";
                case 38: return "EVENT";
                case 39: return "EXPLICIT";
                case 40: return "EXTERN";
                case 41: return "FALSE";
                case 42: return "FINALLY";
                case 43: return "FIXED";
                case 44: return "FLOAT";
                case 45: return "FOR";
                case 46: return "FOREACH";
                case 47: return "FROM";
                case 48: return "GET";
                case 49: return "GOTO";
                case 50: return "GROUP";
                case 51: return "IF";
                case 52: return "IMPLICIT";
                case 53: return "IN";
                case 54: return "INT";
                case 55: return "INTERFACE";
                case 56: return "INTERNAL";
                case 57: return "INTO";
                case 58: return "IS";
                case 59: return "JOIN";
                case 60: return "LET";
                case 61: return "LOCK";
                case 62: return "LONG";
                case 63: return "NAMEOF";
                case 64: return "NAMESPACE";
                case 65: return "NEW";
                case 66: return "NULL";
                case 67: return "OBJECT";
                case 68: return "ON";
                case 69: return "OPERATOR";
                case 70: return "ORDERBY";
                case 71: return "OUT";
                case 72: return "OVERRIDE";
                case 73: return "PARAMS";
                case 74: return "PARTIAL";
                case 75: return "PRIVATE";
                case 76: return "PROTECTED";
                case 77: return "PUBLIC";
                case 78: return "READONLY";
                case 79: return "REF";
                case 80: return "REMOVE";
                case 81: return "RETURN";
                case 82: return "SBYTE";
                case 83: return "SEALED";
                case 84: return "SELECT";
                case 85: return "SET";
                case 86: return "SHORT";
                case 87: return "SIZEOF";
                case 88: return "STACKALLOC";
                case 89: return "STATIC";
                case 90: return "STRING";
                case 91: return "STRUCT";
                case 92: return "SWITCH";
                case 93: return "THIS";
                case 94: return "THROW";
                case 95: return "TRUE";
                case 96: return "TRY";
                case 97: return "TYPEOF";
                case 98: return "UINT";
                case 99: return "ULONG";
                case 100: return "UNCHECKED";
                case 101: return "UNSAFE";
                case 102: return "USHORT";
                case 103: return "USING";
                case 104: return "VIRTUAL";
                case 105: return "VOID";
                case 106: return "VOLATILE";
                case 107: return "WHEN";
                case 108: return "WHERE";
                case 109: return "WHILE";
                case 110: return "YIELD";
                case 111: return "IDENTIFIER";
                case 112: return "LITERAL_ACCESS";
                case 113: return "INTEGER_LITERAL";
                case 114: return "HEX_INTEGER_LITERAL";
                case 115: return "REAL_LITERAL";
                case 116: return "CHARACTER_LITERAL";
                case 117: return "REGULAR_STRING";
                case 118: return "VERBATIUM_STRING";
                case 119: return "INTERPOLATED_REGULAR_STRING_START";
                case 120: return "INTERPOLATED_VERBATIUM_STRING_START";
                case 121: return "OPEN_BRACE";
                case 122: return "CLOSE_BRACE";
                case 123: return "OPEN_BRACKET";
                case 124: return "CLOSE_BRACKET";
                case 125: return "OPEN_PARENS";
                case 126: return "CLOSE_PARENS";
                case 127: return "DOT";
                case 128: return "COMMA";
                case 129: return "COLON";
                case 130: return "SEMICOLON";
                case 131: return "PLUS";
                case 132: return "MINUS";
                case 133: return "STAR";
                case 134: return "DIV";
                case 135: return "PERCENT";
                case 136: return "AMP";
                case 137: return "BITWISE_OR";
                case 138: return "CARET";
                case 139: return "BANG";
                case 140: return "TILDE";
                case 141: return "ASSIGNMENT";
                case 142: return "LT";
                case 143: return "GT";
                case 144: return "INTERR";
                case 145: return "DOUBLE_COLON";
                case 146: return "OP_COALESCING";
                case 147: return "OP_INC";
                case 148: return "OP_DEC";
                case 149: return "OP_AND";
                case 150: return "OP_OR";
                case 151: return "OP_PTR";
                case 152: return "OP_EQ";
                case 153: return "OP_NE";
                case 154: return "OP_LE";
                case 155: return "OP_GE";
                case 156: return "OP_ADD_ASSIGNMENT";
                case 157: return "OP_SUB_ASSIGNMENT";
                case 158: return "OP_MULT_ASSIGNMENT";
                case 159: return "OP_DIV_ASSIGNMENT";
                case 160: return "OP_MOD_ASSIGNMENT";
                case 161: return "OP_AND_ASSIGNMENT";
                case 162: return "OP_OR_ASSIGNMENT";
                case 163: return "OP_XOR_ASSIGNMENT";
                case 164: return "OP_LEFT_SHIFT";
                case 165: return "OP_LEFT_SHIFT_ASSIGNMENT";
                case 166: return "DOUBLE_CURLY_INSIDE";
                case 167: return "OPEN_BRACE_INSIDE";
                case 168: return "REGULAR_CHAR_INSIDE";
                case 169: return "VERBATIUM_DOUBLE_QUOTE_INSIDE";
                case 170: return "DOUBLE_QUOTE_INSIDE";
                case 171: return "REGULAR_STRING_INSIDE";
                case 172: return "VERBATIUM_INSIDE_STRING";
                case 173: return "CLOSE_BRACE_INSIDE";
                case 174: return "FORMAT_STRING";
                case 175: return "DIRECTIVE_WHITESPACES";
                case 176: return "DIGITS";
                case 177: return "DEFINE";
                case 178: return "UNDEF";
                case 179: return "ELIF";
                case 180: return "ENDIF";
                case 181: return "LINE";
                case 182: return "ERROR";
                case 183: return "WARNING";
                case 184: return "REGION";
                case 185: return "ENDREGION";
                case 186: return "PRAGMA";
                case 187: return "DIRECTIVE_HIDDEN";
                case 188: return "CONDITIONAL_SYMBOL";
                case 189: return "DIRECTIVE_NEW_LINE";
                case 190: return "TEXT";
                case 191: return "DOUBLE_CURLY_CLOSE_INSIDE";

                default: return string.Empty;
            }
        }

        public static string LiteralToTypeName(string literal)
        {
            switch (literal)
            {
                case "\\u00EF\\u00BB\\u00BF": return "BYTE_ORDER_MARK";
                case "#": return "SHARP";
                case "abstract": return "ABSTRACT";
                case "add": return "ADD";
                case "alias": return "ALIAS";
                case "__arglist": return "ARGLIST";
                case "as": return "AS";
                case "ascending": return "ASCENDING";
                case "async": return "ASYNC";
                case "await": return "AWAIT";
                case "base": return "BASE";
                case "bool": return "BOOL";
                case "break": return "BREAK";
                case "by": return "BY";
                case "byte": return "BYTE";
                case "case": return "CASE";
                case "catch": return "CATCH";
                case "char": return "CHAR";
                case "checked": return "CHECKED";
                case "class": return "CLASS";
                case "const": return "CONST";
                case "continue": return "CONTINUE";
                case "decimal": return "DECIMAL";
                case "default": return "DEFAULT";
                case "delegate": return "DELEGATE";
                case "descending": return "DESCENDING";
                case "do": return "DO";
                case "double": return "DOUBLE";
                case "dynamic": return "DYNAMIC";
                case "else": return "ELSE";
                case "enum": return "ENUM";
                case "equals": return "EQUALS";
                case "event": return "EVENT";
                case "explicit": return "EXPLICIT";
                case "extern": return "EXTERN";
                case "false": return "FALSE";
                case "finally": return "FINALLY";
                case "fixed": return "FIXED";
                case "float": return "FLOAT";
                case "for": return "FOR";
                case "foreach": return "FOREACH";
                case "from": return "FROM";
                case "get": return "GET";
                case "goto": return "GOTO";
                case "group": return "GROUP";
                case "if": return "IF";
                case "implicit": return "IMPLICIT";
                case "in": return "IN";
                case "int": return "INT";
                case "interface": return "INTERFACE";
                case "internal": return "INTERNAL";
                case "into": return "INTO";
                case "is": return "IS";
                case "join": return "JOIN";
                case "let": return "LET";
                case "lock": return "LOCK";
                case "long": return "LONG";
                case "nameof": return "NAMEOF";
                case "namespace": return "NAMESPACE";
                case "new": return "NEW";
                case "object": return "OBJECT";
                case "on": return "ON";
                case "operator": return "OPERATOR";
                case "orderby": return "ORDERBY";
                case "out": return "OUT";
                case "override": return "OVERRIDE";
                case "params": return "PARAMS";
                case "partial": return "PARTIAL";
                case "private": return "PRIVATE";
                case "protected": return "PROTECTED";
                case "public": return "PUBLIC";
                case "readonly": return "READONLY";
                case "ref": return "REF";
                case "remove": return "REMOVE";
                case "return": return "RETURN";
                case "sbyte": return "SBYTE";
                case "sealed": return "SEALED";
                case "select": return "SELECT";
                case "set": return "SET";
                case "short": return "SHORT";
                case "sizeof": return "SIZEOF";
                case "stackalloc": return "STACKALLOC";
                case "static": return "STATIC";
                case "string": return "STRING";
                case "struct": return "STRUCT";
                case "switch": return "SWITCH";
                case "this": return "THIS";
                case "throw": return "THROW";
                case "true": return "TRUE";
                case "try": return "TRY";
                case "typeof": return "TYPEOF";
                case "uint": return "UINT";
                case "ulong": return "ULONG";
                case "unchecked": return "UNCHECKED";
                case "unsafe": return "UNSAFE";
                case "ushort": return "USHORT";
                case "using": return "USING";
                case "virtual": return "VIRTUAL";
                case "void": return "VOID";
                case "volatile": return "VOLATILE";
                case "when": return "WHEN";
                case "where": return "WHERE";
                case "while": return "WHILE";
                case "yield": return "YIELD";
                case "{": return "OPEN_BRACE";
                case "}": return "CLOSE_BRACE";
                case "[": return "OPEN_BRACKET";
                case "]": return "CLOSE_BRACKET";
                case "(": return "OPEN_PARENS";
                case ")": return "CLOSE_PARENS";
                case ".": return "DOT";
                case ",": return "COMMA";
                case ":": return "COLON";
                case ";": return "SEMICOLON";
                case "+": return "PLUS";
                case "-": return "MINUS";
                case "*": return "STAR";
                case "/": return "DIV";
                case "%": return "PERCENT";
                case "&": return "AMP";
                case "|": return "BITWISE_OR";
                case "^": return "CARET";
                case "!": return "BANG";
                case "~": return "TILDE";
                case "=": return "ASSIGNMENT";
                case "<": return "LT";
                case ">": return "GT";
                case "?": return "INTERR";
                case "::": return "DOUBLE_COLON";
                case "??": return "OP_COALESCING";
                case "++": return "OP_INC";
                case "--": return "OP_DEC";
                case "&&": return "OP_AND";
                case "||": return "OP_OR";
                case "->": return "OP_PTR";
                case "==": return "OP_EQ";
                case "!=": return "OP_NE";
                case "<=": return "OP_LE";
                case ">=": return "OP_GE";
                case "+=": return "OP_ADD_ASSIGNMENT";
                case "-=": return "OP_SUB_ASSIGNMENT";
                case "*=": return "OP_MULT_ASSIGNMENT";
                case "/=": return "OP_DIV_ASSIGNMENT";
                case "%=": return "OP_MOD_ASSIGNMENT";
                case "&=": return "OP_AND_ASSIGNMENT";
                case "|=": return "OP_OR_ASSIGNMENT";
                case "^=": return "OP_XOR_ASSIGNMENT";
                case "<<": return "OP_LEFT_SHIFT";
                case "<<=": return "OP_LEFT_SHIFT_ASSIGNMENT";
                case "{{": return "DOUBLE_CURLY_INSIDE";
                case "define": return "DEFINE";
                case "undef": return "UNDEF";
                case "elif": return "ELIF";
                case "endif": return "ENDIF";
                case "line": return "LINE";
                case "hidden": return "DIRECTIVE_HIDDEN";
                case "}}": return "DOUBLE_CURLY_CLOSE_INSIDE";

                default: return null;
            }
        }

        public static string TypeNameToLiteral(string name)
        {
            switch (name.ToUpper())
            {
                case "BYTE_ORDER_MARK": return "\\u00EF\\u00BB\\u00BF";
                case "SINGLE_LINE_DOC_COMMENT": return null;
                case "DELIMITED_DOC_COMMENT": return null;
                case "SINGLE_LINE_COMMENT": return null;
                case "DELIMITED_COMMENT": return null;
                case "WHITESPACES": return null;
                case "SHARP": return "#";
                case "ABSTRACT": return "abstract";
                case "ADD": return "add";
                case "ALIAS": return "alias";
                case "ARGLIST": return "__arglist";
                case "AS": return "as";
                case "ASCENDING": return "ascending";
                case "ASYNC": return "async";
                case "AWAIT": return "await";
                case "BASE": return "base";
                case "BOOL": return "bool";
                case "BREAK": return "break";
                case "BY": return "by";
                case "BYTE": return "byte";
                case "CASE": return "case";
                case "CATCH": return "catch";
                case "CHAR": return "char";
                case "CHECKED": return "checked";
                case "CLASS": return "class";
                case "CONST": return "const";
                case "CONTINUE": return "continue";
                case "DECIMAL": return "decimal";
                case "DEFAULT": return "default";
                case "DELEGATE": return "delegate";
                case "DESCENDING": return "descending";
                case "DO": return "do";
                case "DOUBLE": return "double";
                case "DYNAMIC": return "dynamic";
                case "ELSE": return "else";
                case "ENUM": return "enum";
                case "EQUALS": return "equals";
                case "EVENT": return "event";
                case "EXPLICIT": return "explicit";
                case "EXTERN": return "extern";
                case "FALSE": return "false";
                case "FINALLY": return "finally";
                case "FIXED": return "fixed";
                case "FLOAT": return "float";
                case "FOR": return "for";
                case "FOREACH": return "foreach";
                case "FROM": return "from";
                case "GET": return "get";
                case "GOTO": return "goto";
                case "GROUP": return "group";
                case "IF": return "if";
                case "IMPLICIT": return "implicit";
                case "IN": return "in";
                case "INT": return "int";
                case "INTERFACE": return "interface";
                case "INTERNAL": return "internal";
                case "INTO": return "into";
                case "IS": return "is";
                case "JOIN": return "join";
                case "LET": return "let";
                case "LOCK": return "lock";
                case "LONG": return "long";
                case "NAMEOF": return "nameof";
                case "NAMESPACE": return "namespace";
                case "NEW": return "new";
                case "NULL": return "null";
                case "OBJECT": return "object";
                case "ON": return "on";
                case "OPERATOR": return "operator";
                case "ORDERBY": return "orderby";
                case "OUT": return "out";
                case "OVERRIDE": return "override";
                case "PARAMS": return "params";
                case "PARTIAL": return "partial";
                case "PRIVATE": return "private";
                case "PROTECTED": return "protected";
                case "PUBLIC": return "public";
                case "READONLY": return "readonly";
                case "REF": return "ref";
                case "REMOVE": return "remove";
                case "RETURN": return "return";
                case "SBYTE": return "sbyte";
                case "SEALED": return "sealed";
                case "SELECT": return "select";
                case "SET": return "set";
                case "SHORT": return "short";
                case "SIZEOF": return "sizeof";
                case "STACKALLOC": return "stackalloc";
                case "STATIC": return "static";
                case "STRING": return "string";
                case "STRUCT": return "struct";
                case "SWITCH": return "switch";
                case "THIS": return "this";
                case "THROW": return "throw";
                case "TRUE": return "true";
                case "TRY": return "try";
                case "TYPEOF": return "typeof";
                case "UINT": return "uint";
                case "ULONG": return "ulong";
                case "UNCHECKED": return "unchecked";
                case "UNSAFE": return "unsafe";
                case "USHORT": return "ushort";
                case "USING": return "using";
                case "VIRTUAL": return "virtual";
                case "VOID": return "void";
                case "VOLATILE": return "volatile";
                case "WHEN": return "when";
                case "WHERE": return "where";
                case "WHILE": return "while";
                case "YIELD": return "yield";
                case "IDENTIFIER": return null;
                case "LITERAL_ACCESS": return null;
                case "INTEGER_LITERAL": return null;
                case "HEX_INTEGER_LITERAL": return null;
                case "REAL_LITERAL": return null;
                case "CHARACTER_LITERAL": return null;
                case "REGULAR_STRING": return null;
                case "VERBATIUM_STRING": return null;
                case "INTERPOLATED_REGULAR_STRING_START": return null;
                case "INTERPOLATED_VERBATIUM_STRING_START": return null;
                case "OPEN_BRACE": return "{";
                case "CLOSE_BRACE": return "}";
                case "OPEN_BRACKET": return "[";
                case "CLOSE_BRACKET": return "]";
                case "OPEN_PARENS": return "(";
                case "CLOSE_PARENS": return ")";
                case "DOT": return ".";
                case "COMMA": return ",";
                case "COLON": return ":";
                case "SEMICOLON": return ";";
                case "PLUS": return "+";
                case "MINUS": return "-";
                case "STAR": return "*";
                case "DIV": return "/";
                case "PERCENT": return "%";
                case "AMP": return "&";
                case "BITWISE_OR": return "|";
                case "CARET": return "^";
                case "BANG": return "!";
                case "TILDE": return "~";
                case "ASSIGNMENT": return "=";
                case "LT": return "<";
                case "GT": return ">";
                case "INTERR": return "?";
                case "DOUBLE_COLON": return "::";
                case "OP_COALESCING": return "??";
                case "OP_INC": return "++";
                case "OP_DEC": return "--";
                case "OP_AND": return "&&";
                case "OP_OR": return "||";
                case "OP_PTR": return "->";
                case "OP_EQ": return "==";
                case "OP_NE": return "!=";
                case "OP_LE": return "<=";
                case "OP_GE": return ">=";
                case "OP_ADD_ASSIGNMENT": return "+=";
                case "OP_SUB_ASSIGNMENT": return "-=";
                case "OP_MULT_ASSIGNMENT": return "*=";
                case "OP_DIV_ASSIGNMENT": return "/=";
                case "OP_MOD_ASSIGNMENT": return "%=";
                case "OP_AND_ASSIGNMENT": return "&=";
                case "OP_OR_ASSIGNMENT": return "|=";
                case "OP_XOR_ASSIGNMENT": return "^=";
                case "OP_LEFT_SHIFT": return "<<";
                case "OP_LEFT_SHIFT_ASSIGNMENT": return "<<=";
                case "DOUBLE_CURLY_INSIDE": return "{{";
                case "OPEN_BRACE_INSIDE": return null;
                case "REGULAR_CHAR_INSIDE": return null;
                case "VERBATIUM_DOUBLE_QUOTE_INSIDE": return null;
                case "DOUBLE_QUOTE_INSIDE": return null;
                case "REGULAR_STRING_INSIDE": return null;
                case "VERBATIUM_INSIDE_STRING": return null;
                case "CLOSE_BRACE_INSIDE": return null;
                case "FORMAT_STRING": return null;
                case "DIRECTIVE_WHITESPACES": return null;
                case "DIGITS": return null;
                case "DEFINE": return "define";
                case "UNDEF": return "undef";
                case "ELIF": return "elif";
                case "ENDIF": return "endif";
                case "LINE": return "line";
                case "ERROR": return null;
                case "WARNING": return null;
                case "REGION": return null;
                case "ENDREGION": return null;
                case "PRAGMA": return null;
                case "DIRECTIVE_HIDDEN": return "hidden";
                case "CONDITIONAL_SYMBOL": return null;
                case "DIRECTIVE_NEW_LINE": return null;
                case "TEXT": return null;
                case "DOUBLE_CURLY_CLOSE_INSIDE": return "}}";

                default: return string.Empty;
            }
        }
    }
}
